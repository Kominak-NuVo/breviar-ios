//
//  BRPrayerViewController.m
//  Breviar
//
//  Created by Gyimesi Akos on 9/7/12.
//
//

#import "BRPrayerViewController.h"
#import "BRSettings.h"
#import "BRCGIQuery.h"
#import "BRUtil.h"
#import "GAI.h"
#import "GAIFields.h"
#import "GAIDictionaryBuilder.h"
#import <AVFoundation/AVFoundation.h>

@interface BRPrayerViewController ()

@property (strong, nonatomic) UIBarButtonItem *nightModeButton;
@property (strong, nonatomic) UIBarButtonItem *speakButton;
@property (strong, nonatomic) AVSpeechSynthesizer *speechSynthesizer;

@end

@implementation BRPrayerViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    self.speakButton = [[UIBarButtonItem alloc] initWithTitle:BREVIAR_STR(@"tts.read") style:UIBarButtonItemStylePlain target:self action:@selector(speak)];
    
    self.nightModeButton = [[UIBarButtonItem alloc] initWithTitle:@"" style:UIBarButtonItemStylePlain target:self action:@selector(nightModeButtonPressed)];
    [self updateNightModeButtonTitle];
    
    self.navigationController.toolbarHidden = NO;
    self.toolbarItems = @[
        self.speakButton,
        [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil],
        self.nightModeButton
    ];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    self.navigationItem.title = self.prayer.title;
    
    [self.navigationController setToolbarHidden:NO animated:animated];

    // The body will get generated on demand, if it hasn't been already generated by previous request
    [self showHtmlBody:self.prayer.body forPrayer:self.prayer.queryId];
    
    self.speechSynthesizer = nil;

    // Google Analytics
    id<GAITracker> tracker = [[GAI sharedInstance] defaultTracker];
    [tracker set:kGAIScreenName value:[NSString stringWithFormat:@"Prayer/%@", self.prayer.prayerName]];
    [tracker send:[[GAIDictionaryBuilder createAppView] build]];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    
    self.prayer.scrollOffset = self.webView.scrollView.contentOffset.y;
    
    if (self.speechSynthesizer.speaking) {
        [self.speechSynthesizer stopSpeakingAtBoundary:AVSpeechBoundaryWord];
    }
}

- (void)showHtmlBody:(NSString *)body forPrayer:(NSString *)prayerId
{
    self.htmlContent = [NSString stringWithFormat:@"<div id=\"prayer-%@\">%@</div>", prayerId, body];
    [self updateWebViewContent];
}

- (void)nightModeButtonPressed
{
    self.prayer.scrollOffset = self.webView.scrollView.contentOffset.y;
    
    BOOL nightMode = [[BRSettings instance] boolForOption:@"of2nr"];
    [[BRSettings instance] setBool:!nightMode forOption:@"of2nr"];
    [self updateNightModeButtonTitle];
    // TODO: check if discarding the cache is required or not
    [self showHtmlBody:self.prayer.body forPrayer:self.prayer.queryId];
}

- (void)updateNightModeButtonTitle
{
    BOOL nightMode = [[BRSettings instance] boolForOption:@"of2nr"];
    self.nightModeButton.title = nightMode ? BREVIAR_STR(@"mode.day") : BREVIAR_STR(@"mode.night");
}

- (void)speak
{
    if (self.speechSynthesizer.paused) {
        self.speakButton.title = BREVIAR_STR(@"tts.pause");
        [self.speechSynthesizer continueSpeaking];
    }
    
    else if (self.speechSynthesizer.speaking) {
        self.speakButton.title = BREVIAR_STR(@"tts.continue");
        [self.speechSynthesizer pauseSpeakingAtBoundary:AVSpeechBoundaryWord];
    }
    
    else {
        self.speakButton.title = BREVIAR_STR(@"tts.loading");
        self.speakButton.enabled = NO;
        
        BOOL oldValue = [[BRSettings instance] boolForOption:@"of0bf"];
        if (oldValue == NO) {
            // We're setting the blind-friendly option to YES because updateWebViewContent adds CSS tags based on it
            [[BRSettings instance] setBool:YES forOption:@"of0bf"];
        }

        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{
            NSString *body = self.prayer.bodyForSpeechSynthesis;
            
            dispatch_async(dispatch_get_main_queue(), ^{
                self.speechSynthesizer = [[AVSpeechSynthesizer alloc] init];
                [self showHtmlBody:body forPrayer:self.prayer.queryId];
                if (oldValue == NO) {
                    [[BRSettings instance] setBool:NO forOption:@"of0bf"];
                }
            });
        });
    }
}

- (void)webViewDidFinishLoad:(UIWebView *)webView
{
    [super webViewDidFinishLoad:webView];
    
    if (self.prayer.scrollOffset) {
        self.webView.scrollView.contentOffset = CGPointMake(0, self.prayer.scrollOffset);
    }
    
    // An instance of AVSpeechSynthesizer must be initialized before loading content in web view
    if (self.speechSynthesizer && !self.speechSynthesizer.speaking) {
        NSString *webViewString = [self.webView stringByEvaluatingJavaScriptFromString:@"(function (){ return document.body.innerText; })();"];
        
        NSString *selectedLanguage = [[BRSettings instance] stringForOption:@"j"];
        NSDictionary *voiceCodes = @{
            @"sk": @"sk-SK",
            @"cz": @"cs-CZ",
            @"hu": @"hu-HU",
        };
        NSString *voiceCode = voiceCodes[selectedLanguage];
        if (!voiceCode) {
            voiceCode = @"sk-SK";
        }
        AVSpeechSynthesisVoice *voice = [AVSpeechSynthesisVoice voiceWithLanguage:voiceCode];
        
        AVSpeechUtterance *utterance = [AVSpeechUtterance speechUtteranceWithString:webViewString];
        utterance.rate = AVSpeechUtteranceDefaultSpeechRate / 3;
        utterance.voice = voice;
        
        [self.speechSynthesizer speakUtterance:utterance];
        
        self.speakButton.title = BREVIAR_STR(@"tts.pause");
        self.speakButton.enabled = YES;
    }
}

@end
