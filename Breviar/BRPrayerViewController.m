//
//  BRPrayerViewController.m
//  Breviar
//
//  Created by Gyimesi Akos on 9/7/12.
//
//

#import "BRPrayerViewController.h"
#import "BRSettings.h"
#import "BRCGIQuery.h"
#import "BRUtil.h"
#import "GAI.h"
#import "GAIFields.h"
#import "GAIDictionaryBuilder.h"

@interface BRPrayerViewController ()
@property(strong) UITapGestureRecognizer *tapGesture;
@end

@implementation BRPrayerViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
}

- (void)viewWillAppear:(BOOL)animated {
    self.navigationItem.title = self.prayer.title;
    
    // If we are coming from a subpage, move its shared webview here
    if (self.subpageController) {
        self.webView = self.subpageController.webView;
        [self setupSharedWebView];
    }
    
    // The body will get generated on demand, if it hasn't been already generated by previous request
    [self showHtmlBody:self.prayer.body forPrayer:self.prayer.queryId];
    [super viewWillAppear:animated];

    // Google Analytics
    id<GAITracker> tracker = [[GAI sharedInstance] defaultTracker];
    [tracker set:kGAIScreenName value:[NSString stringWithFormat:@"Prayer/%@", self.prayer.prayerName]];
    [tracker send:[[GAIDictionaryBuilder createAppView] build]];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    
    // Add gesture recognizer
    self.tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(showHideNavbar:)];
    self.tapGesture.delegate = self;
    [self.view addGestureRecognizer:self.tapGesture];
    
    // Disable automatic screen lock
    [UIApplication sharedApplication].idleTimerDisabled = YES;
}

- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    
    // Remove gesture recognizer
    if (self.tapGesture) {
        [self.view removeGestureRecognizer:self.tapGesture];
        self.tapGesture = nil;
    }
    
    // Re-enable automatic screen lock
    [UIApplication sharedApplication].idleTimerDisabled = NO;
}

- (void)showHideNavbar:(id)sender
{
    // On small scrolling events UIKit
	if (self.webView.scrollingInProgress || [self.webView hadRecentScrolling]) {
		return;
	}
	
    BOOL navbarHidden = [UIApplication sharedApplication].isStatusBarHidden;
    
    if (navbarHidden) {
        self.navigationController.navigationBarHidden = NO;
        self.navigationController.navigationBar.alpha = 0;
    }
    
    [UIView animateWithDuration:UINavigationControllerHideShowBarDuration
                     animations:^{
                         [[UIApplication sharedApplication] setStatusBarHidden:!navbarHidden withAnimation:UIStatusBarAnimationFade];
                         self.navigationController.navigationBar.alpha = navbarHidden ? 1.0 : 0.0;
                     }
                     completion:^(BOOL finished) {
                         if (finished && !navbarHidden) {
                             self.navigationController.navigationBarHidden = YES;
                         }
                     }
     ];
}

- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer
{
    return YES;
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([segue.identifier isEqualToString:@"ShowSubpage"]) {
        NSURL *url = sender;
        
        // Parse URL
        NSArray *argList = [url.query componentsSeparatedByString:@"&"];
        NSMutableDictionary *args = [[NSMutableDictionary alloc] init];
        for (NSString *kv in argList) {
            NSArray *kvParts = [kv componentsSeparatedByString:@"="];
            NSString *k = [kvParts objectAtIndex:0];
            NSString *v = [kvParts objectAtIndex:1];
            [args setObject:v forKey:k];
        }
        
        // Run query and show result
        NSString *body = [BRCGIQuery queryWithArgs:args];
        self.subpageController = segue.destinationViewController;
        self.subpageController.webView = self.webView;
        self.subpageController.htmlContent = [NSString stringWithFormat:@"<div id=\"prayer-custom\">%@</div>", body];

        // Set subpage title
        NSString *subpageTitleKey = [args objectForKey:@"st"];
        self.subpageController.title = subpageTitleKey ? BREVIAR_STR(subpageTitleKey) : self.navigationController.title;

        [UIApplication sharedApplication].statusBarHidden = NO;
        self.navigationController.navigationBarHidden = NO;
        self.navigationController.navigationBar.alpha = 1.0;
    }
}

- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
    if ([request.URL.absoluteString containsString:@".cgi?"]) {
        [self performSegueWithIdentifier:@"ShowSubpage" sender:request.URL];
        return NO;
    }
    else {
        // Allow requests to local files only
        return request.URL.isFileURL;
    }
}

- (void)showHtmlBody:(NSString *)body forPrayer:(NSString *)prayerId
{
    self.htmlContent = [NSString stringWithFormat:@"<div id=\"prayer-%@\">%@</div>", prayerId, body];
    [self updateWebViewContent];
}

@end
